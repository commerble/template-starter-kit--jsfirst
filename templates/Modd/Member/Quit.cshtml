@{
  var viewData = Page.ViewData[BasicController.ViewMessageKey] as ViewMessages; 
  var tokenTag = Page.Html.AntiForgeryToken().ToString();
  var tokenName = Regex.Match(tokenTag, @"name=""([^\"".]*)""");
  var tokenValue = Regex.Match(tokenTag, @"value=""([^\"".]*)""");
}
<script id="pagedata" type="application/json">
  @Raw(Jil.JSON.Serialize(new{
    errors = viewData.Errors,
    messages = viewData.Messages,
	  token = tokenValue.Groups[1].Value,
	  accountUrl  = Page.Url.RouteUrl("ModdDefault", new { controller="Member", action="Account"}),
    pointUrl    = Page.Url.RouteUrl("ModdDefault", new { controller="Member", action="Point"}),
    passwordUrl = Page.Url.RouteUrl("ModdDefault", new { controller="Member", action="Password"}),
    quitUrl     = Page.Url.RouteUrl("ModdDefault", new { controller="Member", action="Quit"}),
    historyUrl  = Page.Url.RouteUrl("ModdDefault", new { controller="Order", action="History"}),
    noticeUrl   = Page.Url.RouteUrl("ModdDefault", new { controller="Member", action="Notices"}),
    favoriteUrl = Page.Url.RouteUrl("ModdDefault", new { controller="Member", action="Favorites"}),
    addressesUrl= Page.Url.RouteUrl("ModdDefault", new { controller="Member", action="Addresses"}),
    memberUrl   = Page.Url.RouteUrl("ModdDefault", new { controller="Member", action="Index"}),
    action = Page.Template.SecuredLink("ModdDefault", new {controller="Member", action="Quit"}),
  }, Jil.Options.ISO8601))
</script>
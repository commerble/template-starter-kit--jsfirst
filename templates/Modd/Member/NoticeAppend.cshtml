@{
	var notice = Page.ViewData.Model as VM.NoticeAppend; 
	var viewData = Page.ViewData[BasicController.ViewMessageKey] as ViewMessages;
	var tokenTag = Page.Html.AntiForgeryToken().ToString();
	var tokenName = Regex.Match(tokenTag, @"name=""([^\"".]*)""");
	var tokenValue = Regex.Match(tokenTag, @"value=""([^\"".]*)""");
	var unitPriceWithTax = Page.Template.GetUnitPriceWithTax(notice.ProductId);
}
<script id="pagedata" type="application/json">
  @Raw(Jil.JSON.Serialize(new{
    errors = viewData.Errors,
    messages = viewData.Messages,
    notice = new {
		qty = notice.RequestAmount,
		subtotal = unitPriceWithTax * notice.RequestAmount,
		product = new {
			id = notice.ProductId,
			name = notice.Product.Name,
			color = notice.Product.ExternalId3,
			size = notice.Product.ExternalId4,
			unitPriceWithTax,
			icon = "https://via.placeholder.com/64x64?text=Item"
		},
	},
    token = tokenValue.Groups[1].Value,
	selectableAmounts = notice.SelectAmount(),
  	accountUrl  = Page.Url.RouteUrl("ModdDefault", new { controller="Member", action="Account"}),
    pointUrl    = Page.Url.RouteUrl("ModdDefault", new { controller="Member", action="Point"}),
    passwordUrl = Page.Url.RouteUrl("ModdDefault", new { controller="Member", action="Password"}),
    quitUrl     = Page.Url.RouteUrl("ModdDefault", new { controller="Member", action="Quit"}),
    historyUrl  = Page.Url.RouteUrl("ModdDefault", new { controller="Order", action="History"}),
    noticeUrl   = Page.Url.RouteUrl("ModdDefault", new { controller="Member", action="Notices"}),
    favoriteUrl = Page.Url.RouteUrl("ModdDefault", new { controller="Member", action="Favorites"}),
    addressesUrl= Page.Url.RouteUrl("ModdDefault", new { controller="Member", action="Addresses"}),
    action = Page.Template.SecuredLink("ModdDefault", new { controller="Member", action="CreateNotice", item=notice.ProductId })
  }, Jil.Options.ISO8601))
</script>
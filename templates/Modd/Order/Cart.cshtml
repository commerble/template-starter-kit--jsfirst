@{
	Layout = null;
	Page.Response.ContentType = "application/json";
	var carts = Page.ViewData.Model as IEnumerable<ShoppingCartBase>;
	
	var body = carts.Select(cart => new {
		errors = cart.Errors.Select(error => new { 
			type = error.ErrorType, 
			code = error.DetailErrorCode, 
			message = error.DetailErrorMessage, 
			item = new {
				id = error.Item?.ProductId,
				name = error.Item?.Product.Name
			}
		}),
		items = cart.ExpandItems.Where(item => item.OrderLineType != OrderLineType.SetProductChild).Select(item => new {
			id = item.ProductId,
			name = item.Product.Name,
			type = item.OrderLineType,
			color = item.Product.ExternalId3,
			size = item.Product.ExternalId4,
			unitPriceWithTax = item.UnitPrice + item.UnitTax,
			qty = item.RequestAmount,
			linePrice = item.LinePrice,
			stockout = cart.Errors.Any(error => error.ErrorType == ShoppingCartErrorType.StockOut && error.Item == item),
			pointonly = item.IsPointOnly,
			icon = "https://via.placeholder.com/64x64?text=Item"
		}),
		campaigns = cart.AppliedCampaigns.Select(campaign => new {
			id = campaign.CampaignId,
			name = campaign.CampaignName,
			type = campaign.CampaignType,
		}),
		canCancel = cart.CanCancel,
		subtotal = cart.Subtotal,
	});
}
@Raw(Jil.JSON.Serialize(body))